[tool.poetry]
name = "app"
version = "0.1.0"
description = ""
authors = ["Stanislav Novoseltcev <novoseltcev.stanislav@gmail.com>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.101.1"
gunicorn = "^21.2.0"
uvicorn = "^0.23.2"
sqlalchemy = {extras = ["async"], version = "^2.0.19"}
asyncpg = "^0.27.0"
python-dotenv = "^1.0.0"
pydantic = {extras = ["email"], version = "^2.2.1"}
pydantic-settings = "^2.0.2"
celery = "^5.3.1"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.6"
httpx = "^0.24.1"
avro = "^1.11.2"
confluent-kafka = "^2.2.0"


[tool.poetry.group.dev.dependencies]
black = "^23.7.0"
ruff = "^0.0.282"
mypy = "^1.4.1"
alembic = "^1.11.2"

[tool.poetry.scripts]
lint = "scripts.lint:main"
format = "scripts.format:main"


[tool.ruff]
line-length = 88
target-version = "py311"
select = [ 
    "E", "F", # Base
    "C90", "SIM", # Complexy
    "I", "TID", # Imports
    "G", # Logging
    "N", # Pep8
    "Q", # "D", # Docstring
    "A", "B", "S", "DTZ", "T10", "BLE", "FBT", "COM", "C4", "ICN", "PIE", "RET", "ARG", "PTH", "ERA", "SLF", # Pyflake8-*
    "UP", "YTT", "INP", # Features
    "ANN", # Types
    "PT", # Pytest
    "EM", "TRY", "RSE", "BLE", # Errors
    "RUF" # Ruff codes
]
allowed-confusables = []
builtins = ["_"]
format="text"
ignore = [
    "ANN101", "ANN102", 
    "N803", "RUF001",
    "TRY003", 
    "S603",
    "EM101"
]
ignore-init-module-imports = true
show-source = false
exclude = [
    ".git", ".gitlab", # Git files
    "__init__.py", 
    # There's no value in checking cache directories
    "__pycache__", ".mypy_cache", ".pytest_cache", ".ruff_cache", # Cache dirs
    "dist", "build", # Build of code
    "backend/lib/rpc.py"
]

[tool.ruff.per-file-ignores]
"test_*.py" = ["S101", "ARG002"]


[tool.ruff.flake8-annotations]
allow-star-arg-any = true
suppress-none-returning = true

[tool.ruff.flake8-bugbear]
# Allow to add custom default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = ["fastapi.Depends"]

[tool.ruff.flake8-quotes]
docstring-quotes = "single"
inline-quotes = "single"
multiline-quotes = "single"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.ruff.pydocstyle]
convention = "pep257"

[tool.black]
line-length = 88
target-version = ['py311']
skip-string-normalization = true  # ruff already fix it

[tool.mypy]
python_version = "3.11"
plugins = [
    "pydantic.mypy"
]
warn_unused_configs = true
warn_return_any = true
warn_unreachable = true
disallow_incomplete_defs = true
disallow_untyped_calls = false
disallow_untyped_decorators = false
ignore_missing_imports = true
no_implicit_optional = true
strict_equality = true
pretty = true
show_error_codes = true
show_error_context = true
show_traceback = true
show_column_numbers = true

# Pydantic require
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"